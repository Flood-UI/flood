#!/usr/bin/env node
'use strict';

let fs = require('fs');

// Ensure we have a user-defined config.js for use throughout the app.
try {
  fs.accessSync('./config.js', fs.F_OK);
} catch (error) {
  console.error('Cannot start Flood server, config.js is missing. Copy ' +
    'config.template.js to config.js.');
  return;
}

let app = require('../app');
let config = require('../../config');
let debug = require('debug')('flood:server');

// Get port from environment and store in Express.
let port = normalizePort(config.floodServerPort);
app.set('port', port);

// Create HTTP or HTTPS server.
let server;

if (config.ssl) {
  if (!config.sslKey || !config.sslCert){
    console.error('Cannot start HTTPS server, `sslKey` or `sslCert`' +
      ' is missing in config.js.');
    return;
  }

  server = require('https').createServer({
    key: fs.readFileSync(config.sslKey),
    cert: fs.readFileSync(config.sslCert)
  }, app);
} else {
  server = require('http').createServer(app);
}

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  let port = parseInt(val, 10);

  // Named pipe.
  if (isNaN(port)) {
    return val;
  }

  // Port number.
  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // Handle specific listen errors with friendly messages.
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
